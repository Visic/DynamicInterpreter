--Consider adding "rules" or "tostring" to allow the parser to work on any data, not just strings
--Optimization
	--Evaluate the performance of the generated parsers and optimize if needed
	--Either memoize results so that repeated runs of the same parser on the same input become constant time operations
			--and/or
	--Reduce and optimize the grammar so there is little to no duplication of symbols (decision tree?)
		--e.g  <a>='1''2'|'1''3' should be parsed as  '1' followed by any '2'|'3'
	--Try to eliminate the need for recursion
	--add any character match (*)
	--add range support [a-z] [a-Z] [Z-a] [A-Z] [0-9] etc..
	--add support for hexcode char literals
	-error feedback
	-continuing parsing after finding an error (will probably need a way to denote an error handler in the grammar)

--Working on